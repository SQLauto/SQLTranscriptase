George Walkey
Richmond, VA
May 5, 2015
george@insyncva.com

First Debuted at SQL Saturday 381 in Richmond VA on March 21, 2015
https://www.sqlsaturday.com/381/eventhome.aspx

Technology Used/Learned
 1) Powershell
 2) .Net
 3) WMI
 4) SMO
 5) TSQL
 6) BCP, Format Files
 7) DMVs
 8) SQL/WIN Auth
 9) GitHub
 10) Bad MSDN Documentation 

 --- Setup Requirements ---
 1) Powershell 3.0 or greater 
	http://www.microsoft.com/en-us/download/details.aspx?id=34595

 2) Powershell SQL Providers and Modules (or just install SQL Developer)
	CLR TYPES, SMO and any dependencies (MSI installer 4.5 etc)
	2012  http://www.microsoft.com/en-us/download/details.aspx?id=29065
	2014  http://www.microsoft.com/en-us/download/details.aspx?id=42295
 
 3) May have to change your "PSModulePath" Environment SET Variable to append
	"C:\Program Files (x86)\Microsoft SQL Server\120\Tools\PowerShell\Modules"
 
 4) Rocket's prosthetic leg...
	Always a yummy snack
	
 5) Must enable remote registry and firewall ports for WMI to work 
 6) Domain Admin account	
    Kidding
	But you need at least rights on the boxes you are exporting information from
	
--- I basically gather information 3 ways  (SMO, TSQL, WMI)
SMO:
$server = New-Object ('Microsoft.SqlServer.Management.Smo.Server') $SQLInstance

TSQL:
Import-Module "sqlps" -DisableNameChecking -erroraction SilentlyContinue
$results = Invoke-SqlCmd -query $sql  -Server $SQLInstance      

WMI:
$VolumeArray = Get-WmiObject -Computer $WinServer Win32_Volume | Where-Object {$_.FileSystem -eq "NTFS"} | sort-object name 
 
 --- POWERSHELL/SMO/.NET Notes ---
 Most of the examples on MSDN/Technet use [System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SMO") | out-null
 Example: https://technet.microsoft.com/en-us/library/hh245202.aspx
 So I did too.
 
 MS WANTS to deprecate that method for a bigger nightmare:
 http://stackoverflow.com/questions/12923074/how-to-load-assemblies-in-powershell
 They now want you to hunt down (know ahead of time) the versions of the DLL you want to use and specify it by version number.
 This is the dumbness of numbness of versionitis, which .NET was supposed to save us from
 So I tried multiple try/catches for each SQL SMO DLL version, but stuck with LoadPartial

 
Azure
-------- 
NONE of these scripts work with Azure, except for 20_DataBase_Objects.ps1
I will need to create separate versions using the Azure Powershell modules and Cmdlets.
But as soon as I loaded them, most of the scripts blew up and started to return bogus results.

-------------
THE SCRIPTS
-------------
 01 - Server_Appliance
	SMO Object dump
	CPU, RAM, Windows, SQL Edition, Version, Backup and Installation folders
	
 01 - Server_Credentials
	No, I cant dump the passwords, wouldnt be very secure if I could
	SMO
	
 01 - Server_Logins
	TSQL
	master.sys.server_principals
	master.sys.sql_logins 
	master.sys.server_role_members
	
 01 - Resource Governor - Pools and Workgroups
	SMO
	
 01 - Server Roles
	TSQL since SMO doesnt work too well
	To HTML since its a list
	
 01 - Server_Settings
	SMO Object dump
	To HTML since its a list
	Added Buffer_Pool_Extension.sql for 2014+
	
 01 - Server Shares
	WMI
	This will find open DMZ servers, lock em down if need be
	To HTML since its a list

 01 - Server Startup Stored Procedures
    Smo
    The SQL instance can have a set of Stored PRocedures that will run every time 
	the instance is started up. These are simply stored in the Master DB
	SSIS and DQS install Procs here
	Scripted out to .SQL files
	
 01 - Server_Storage
	WMI 
	This will find open DMZ servers, lock em down if need be
	To HTML since its a list
	
 01 - Server_Triggers	
	TSQL
	master.sys.server_triggers
	master.sys.server_assembly_modules
	sys.server_sql_modules
	
 02 - Linked_Servers
	No, I cant dump the passwords, wouldnt be very secure if I could, eh?
	TSQL
	sys.servers
	sys.linked_logins
	sys.server_principals
	
 03 - NET_Assemblies
	TSQL
	Dump binary string from 
	sys.assembly_files
	sys.assemblies
	
 04 - Agent_Alerts
	TSQL
	msdb.dbo.sysalerts
	
 04 - Agent_Jobs
	SMO
	$server.JobServer.Jobs 
	
 04 - Agent_Operators
	TSQL
	sp_help_operator
	
 04 - Agent_Proxies
	These are typically used if your job runs under the normal Agent service creds, 
	but one particular step needs alternate creds, like a powershell script that connects to a DMZ machine
	SMO
	$srv.JobServer.ProxyAccounts
	
 04 - Agent_Schedules
	TSQL
	msdb.dbo.sysschedules
	
 05 - DBMail_Accounts
	TSQL
	msdb.dbo.sysmail_help_account_sp
	
 05 - DBMail_Profiles
	TSQL
	
 07 - Service_Creds
	Edit my list of VALID NT Services you want to export in this script, 
	especially if you gave them non-standard names or named instances such as (MSOLAP$TABULAR, MSSQLServerOLAPService$CUBE)
	WMI 
	This will find open DMZ servers, lock em down if need be
	gwmi -class win32_service

 09 - SSIS_Packages_from_MSDB	
	TSQL
	2005  - msdb..sysdtspackagefolders90 and msdb..sysdtspackages90
	2008+ - msdb..sysssispackagefolders and msdb..sysssispackages
 
 09 - SSIS_Packages_from_SSISDB
	Master Encryption Key is first saved to the default backup folder on the remote server, 
	then copied down to your run folder, so PSHELL will need rights to do that.
	BCP uses an external format file (SSISDB.FMT) that specifies a binary/blob output type, 
	The first line of the BCP format file is a version number that is keyed to the version of SQL you are is running
	TSQL
	BCP
	[SSISDB].[catalog].[projects]
	[SSISDB].[catalog].[folders]
	bcp "exec [ssisdb].[catalog].[get_project] '$foldername','$prjname'"
	Encryption Key: backup master keys to files is done with hard-wired password in the script you *should* change

 10 - SSAS_Databases
	This works on both traditional MD Cube/Fact/Dimension Databases and the newer power-pivot-like Tabular Databases
	Works on named instances, eg I have my Tabular instances called SERVER01/TAB to differentiate them from MD/Cube Databases
	SMO
	Assemblies loaded:
	Microsoft.AnalysisServices	
	System.Xml
	Output Function:
	System.Xml.XmlTextWriter
	
 11 - SSRS_Objects
	SSRS version 2008 can not be accessed over WMI, at least the Encryption Key and Timed Subs cant...hmmm
	The RSreportserver.config file is copied straight off the C$ admin share 
	"c$\Program Files\Microsoft SQL Server\MSRS[VERSION].MSSQLSERVER\Reporting Services\ReportServer\"	 
	So, you will need rights to that folder, and check your firewall settings etc
	SMO
	TSQL
	ReportServer.dbo.Catalog
	Encryption Key: WMI
	RSConfig file: copy file
	Timed Subscriptions: Web Service at http://$SQLInstance/ReportServer/ReportService2010.asmx
	The reason this script may only dump out the RDL is because the RDL is stored in the ReportServer Database,
	but the SSRS/Web service may be turned off
	Added Folder/REport Security - March 31, 2015
	 
  12 - Security Audits
	Originally only looking for Login to DB User mappings,
	Now we export 
	1) Logins
	2) Login to USer Mapping
	3) Roles per User
	4) DB_Level Permissions
	5) Object Permissions
	
	
  13 - PKI
	Certs are first saved to the server's default backup folder, 
	whether local or UNC, then to your run folder, so the SHELL will need rights to that host backup folder
	NOTE: All the exported PKI keys have hard-coded passwords in the save and restore scripts that you *should* change
	TSQL
	SMK: backup service master key
	DMK: backup master key
	Certs: [master].[sys].[certificates]

 14 - Service_Broker
	SMO 
	Namespace: Microsoft.SqlServer.ServiceBrokerEnum
	Message Types: $db.ServiceBroker.MessageTypes
	Contracts: $db.ServiceBroker.ServiceContracts
	Queues: $db.ServiceBroker.Queues
	Services: $db.ServiceBroker.Services
	Routes: $db.ServiceBroker.Routes
	
 15 - Extended Events
    SMO version Finshed March 31, 2015
	Thanks to Jonathan Kahayias of Extended Events fame for plugging all the pieces together.
	My TSQL Version was a nightmare.
	
 16 - Audits
	SMO
	$srv.Audits

 17 - Managed Backups
	What a strange beasty
	Does automated Database backups to Azure blob "when it thinks you need it"
	SQL 2014+ only
	TSQL
	
 20 - DataBase Objects
	SMO
	https://msdn.microsoft.com/en-us/library/microsoft.sqlserver.management.smo.scriptingoptions.aspx
	This takes a LONG TIME and EATS LOTS OF RAM
	( .Net string creation immutability and garbage collection sucks raw eggs) (the old deferred-binding design modality)
	Basically GC is a cached write system
	Tables - changing the Scripter object option "WithDependencies" will create a MONSTER dependency-driven CREATE script file,
	BUT the DRI will be preserved correctly, in order. Good Going SMO writers.
	Schemas  - I had to reformat dumb schema names like "DOMAIN\User" to "DOMAIN_User" so they could be saved to files	
	Stored Procs
	Views
	Full Text Catalogs
	User-Defined Types
	User-Defined Functions
	Database Triggers
	Table Triggers
	Sequences
	Synonyms
	Settings include all 2014+ features such as Delayed Durability
	Anything else not here is in the SMO DB object model, so grab a spoon

--- Rants
Microsoft's inconsistency in enabling and deployment of WMI/CIM/Powershell across the various versions of Windows aint cool
WMI/Remoting/WS-Man is enabled by default on Win Server version 2012 R2 for the Administrator account ONLY, not even the Administrators group.
Firewalls block WMI (which talks on port 135, alongside MSDTC, RPC, endpoint manager, pre-CIFS file sharing)
That means you usually cant hit DMZ servers with WMI
The default ports for CIM are not any better at 5985 (the WinRM port for HTTP) and 5986 (the WinRM port for HTTPS), which may also be blocked.

CIM seems ALOT slower than WMI, for now.
But SMO is slower than Santa Claus on December 26
SMO uses all your RAM
SMO API docs are lacking  Powershell examples, typically having only C#/VB listings

--- Changelog
	On GitHub
